/**
 * Copyright 2015 Carnegie Mellon University. All Rights Reserved.
 * 
 * NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE
 * MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO
 * WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
 * BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY,
 * EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON
 * UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM
 * PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
 * 
 * Released under the Eclipse Public License (http://www.eclipse.org/org/documents/epl-v10.php)
 * 
 * See COPYRIGHT file for full details.
 */
package org.osate.assure.assure.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.osate.assure.assure.util.AssureAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AssureItemProviderAdapterFactory extends AssureAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AssureItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.AssuranceCaseResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssuranceCaseResultItemProvider assuranceCaseResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.AssuranceCaseResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssuranceCaseResultAdapter() {
		if (assuranceCaseResultItemProvider == null) {
			assuranceCaseResultItemProvider = new AssuranceCaseResultItemProvider(this);
		}

		return assuranceCaseResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.ModelResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelResultItemProvider modelResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.ModelResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelResultAdapter() {
		if (modelResultItemProvider == null) {
			modelResultItemProvider = new ModelResultItemProvider(this);
		}

		return modelResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.SubsystemResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubsystemResultItemProvider subsystemResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.SubsystemResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubsystemResultAdapter() {
		if (subsystemResultItemProvider == null) {
			subsystemResultItemProvider = new SubsystemResultItemProvider(this);
		}

		return subsystemResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.ClaimResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClaimResultItemProvider claimResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.ClaimResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClaimResultAdapter() {
		if (claimResultItemProvider == null) {
			claimResultItemProvider = new ClaimResultItemProvider(this);
		}

		return claimResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.VerificationResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerificationResultItemProvider verificationResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.VerificationResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerificationResultAdapter() {
		if (verificationResultItemProvider == null) {
			verificationResultItemProvider = new VerificationResultItemProvider(this);
		}

		return verificationResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.AssureResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssureResultItemProvider assureResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.AssureResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssureResultAdapter() {
		if (assureResultItemProvider == null) {
			assureResultItemProvider = new AssureResultItemProvider(this);
		}

		return assureResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.VerificationExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerificationExprItemProvider verificationExprItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.VerificationExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerificationExprAdapter() {
		if (verificationExprItemProvider == null) {
			verificationExprItemProvider = new VerificationExprItemProvider(this);
		}

		return verificationExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.ElseResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElseResultItemProvider elseResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.ElseResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElseResultAdapter() {
		if (elseResultItemProvider == null) {
			elseResultItemProvider = new ElseResultItemProvider(this);
		}

		return elseResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.ThenResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThenResultItemProvider thenResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.ThenResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThenResultAdapter() {
		if (thenResultItemProvider == null) {
			thenResultItemProvider = new ThenResultItemProvider(this);
		}

		return thenResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.Metrics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricsItemProvider metricsItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.Metrics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricsAdapter() {
		if (metricsItemProvider == null) {
			metricsItemProvider = new MetricsItemProvider(this);
		}

		return metricsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.QualifiedVerificationPlanElementReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualifiedVerificationPlanElementReferenceItemProvider qualifiedVerificationPlanElementReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.QualifiedVerificationPlanElementReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualifiedVerificationPlanElementReferenceAdapter() {
		if (qualifiedVerificationPlanElementReferenceItemProvider == null) {
			qualifiedVerificationPlanElementReferenceItemProvider = new QualifiedVerificationPlanElementReferenceItemProvider(this);
		}

		return qualifiedVerificationPlanElementReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.QualifiedClaimReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualifiedClaimReferenceItemProvider qualifiedClaimReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.QualifiedClaimReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualifiedClaimReferenceAdapter() {
		if (qualifiedClaimReferenceItemProvider == null) {
			qualifiedClaimReferenceItemProvider = new QualifiedClaimReferenceItemProvider(this);
		}

		return qualifiedClaimReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.QualifiedVAReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualifiedVAReferenceItemProvider qualifiedVAReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.QualifiedVAReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualifiedVAReferenceAdapter() {
		if (qualifiedVAReferenceItemProvider == null) {
			qualifiedVAReferenceItemProvider = new QualifiedVAReferenceItemProvider(this);
		}

		return qualifiedVAReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.NestedClaimReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NestedClaimReferenceItemProvider nestedClaimReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.NestedClaimReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNestedClaimReferenceAdapter() {
		if (nestedClaimReferenceItemProvider == null) {
			nestedClaimReferenceItemProvider = new NestedClaimReferenceItemProvider(this);
		}

		return nestedClaimReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.PreconditionResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreconditionResultItemProvider preconditionResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.PreconditionResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreconditionResultAdapter() {
		if (preconditionResultItemProvider == null) {
			preconditionResultItemProvider = new PreconditionResultItemProvider(this);
		}

		return preconditionResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.ValidationResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidationResultItemProvider validationResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.ValidationResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidationResultAdapter() {
		if (validationResultItemProvider == null) {
			validationResultItemProvider = new ValidationResultItemProvider(this);
		}

		return validationResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.VerificationActivityResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerificationActivityResultItemProvider verificationActivityResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.VerificationActivityResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerificationActivityResultAdapter() {
		if (verificationActivityResultItemProvider == null) {
			verificationActivityResultItemProvider = new VerificationActivityResultItemProvider(this);
		}

		return verificationActivityResultItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.assure.assure.PredicateResult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredicateResultItemProvider predicateResultItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.assure.assure.PredicateResult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredicateResultAdapter() {
		if (predicateResultItemProvider == null) {
			predicateResultItemProvider = new PredicateResultItemProvider(this);
		}

		return predicateResultItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (assuranceCaseResultItemProvider != null) assuranceCaseResultItemProvider.dispose();
		if (modelResultItemProvider != null) modelResultItemProvider.dispose();
		if (subsystemResultItemProvider != null) subsystemResultItemProvider.dispose();
		if (claimResultItemProvider != null) claimResultItemProvider.dispose();
		if (verificationResultItemProvider != null) verificationResultItemProvider.dispose();
		if (assureResultItemProvider != null) assureResultItemProvider.dispose();
		if (verificationExprItemProvider != null) verificationExprItemProvider.dispose();
		if (elseResultItemProvider != null) elseResultItemProvider.dispose();
		if (thenResultItemProvider != null) thenResultItemProvider.dispose();
		if (metricsItemProvider != null) metricsItemProvider.dispose();
		if (qualifiedVerificationPlanElementReferenceItemProvider != null) qualifiedVerificationPlanElementReferenceItemProvider.dispose();
		if (qualifiedClaimReferenceItemProvider != null) qualifiedClaimReferenceItemProvider.dispose();
		if (qualifiedVAReferenceItemProvider != null) qualifiedVAReferenceItemProvider.dispose();
		if (nestedClaimReferenceItemProvider != null) nestedClaimReferenceItemProvider.dispose();
		if (preconditionResultItemProvider != null) preconditionResultItemProvider.dispose();
		if (validationResultItemProvider != null) validationResultItemProvider.dispose();
		if (verificationActivityResultItemProvider != null) verificationActivityResultItemProvider.dispose();
		if (predicateResultItemProvider != null) predicateResultItemProvider.dispose();
	}

}
