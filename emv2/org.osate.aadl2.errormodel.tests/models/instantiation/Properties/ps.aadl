property set ps is
	boolean_for_all: aadlboolean applies to (all);
	boolean_for_propagation: aadlboolean applies to ({emv2}**error propagation);
	boolean_for_error_flow: aadlboolean applies to ({emv2}**error flow);
	boolean_for_error_source: aadlboolean applies to ({emv2}**error source);
	boolean_for_error_sink: aadlboolean applies to ({emv2}**error sink);
	boolean_for_error_path: aadlboolean applies to ({emv2}**error path);
	boolean_for_error_behavior_state: aadlboolean applies to ({emv2}**error behavior state);
	boolean_for_error_behavior_event: aadlboolean applies to ({emv2}**error behavior event);
	boolean_for_error_event: aadlboolean applies to ({emv2}**error event);
	boolean_for_recover_event: aadlboolean applies to ({emv2}**recover event);
	boolean_for_repair_event: aadlboolean applies to ({emv2}**repair event);
	boolean_for_error_behavior_transition: aadlboolean applies to ({emv2}**error behavior transition);
	boolean_for_outgoing_propagation_condition: aadlboolean applies to ({emv2}**outgoing propagation condition);
	boolean_for_error_detection: aadlboolean applies to ({emv2}**error detection);
	boolean_for_composite_state: aadlboolean applies to ({emv2}**composite state);
	boolean_for_propagation_path: aadlboolean applies to ({emv2}**propagation path);
	boolean_for_error_model_subclause: aadlboolean applies to ({emv2}**error model subclause);
	boolean_for_error_behavior_state_machine: aadlboolean applies to ({emv2}** error behavior state machine);
	boolean_for_error_types: aadlboolean applies to ({emv2}** error types);
	boolean_for_error_type: aadlboolean applies to ({emv2}**error types);
	
	string1: aadlstring applies to (all);
	string2: aadlstring applies to (all);
	string3: aadlstring applies to (all);
	string4: aadlstring applies to (all);
	string5: aadlstring applies to (all);
	string6: aadlstring applies to (all);
	string7: aadlstring applies to (all);
	string8: aadlstring applies to (all);
	string9: aadlstring applies to (all);
	
	default_string: aadlstring => "Default Value" applies to (all);
	
	string_for_type_set: aadlstring applies to ({emv2}**type set);
	
	const1: constant aadlstring => "Constant Value";
	
	list1: list of aadlstring applies to (all);
	list2: list of aadlstring applies to (all);
	list3: list of aadlstring applies to (all);
	
	rec1_type: type record (
		field1: aadlstring;
		list_field: list of aadlstring;
	);
	rec2_type: type record (field2: ps::rec1_type;);
	
	rec1: ps::rec1_type applies to (all);
	rec2: ps::rec2_type applies to (all);
	rec3: record (field3: ps::rec2_type;) applies to (all);
	rec4: record (field4: aadlstring;) applies to (all);
	rec5: record (field5: aadlstring;) applies to (all);
	
	ref1: reference applies to (all);
	ref2: reference applies to (all);
	ref3: reference applies to (all);
	ref4: reference applies to (all);
	
	range1: range of aadlinteger applies to (all);
	range2: range of aadlinteger applies to (all);
	range3: range of aadlinteger applies to (all);
	range4: range of aadlinteger applies to (all);
	range5: range of aadlinteger applies to (all);
	range6: range of aadlinteger applies to (all);
	range7: range of aadlinteger applies to (all);
	range8: range of aadlinteger applies to (all);
	
	int1: aadlinteger applies to (all);
	int2: aadlinteger applies to (all);
	int3: aadlinteger applies to (all);
	int4: aadlinteger applies to (all);
	int5: aadlinteger applies to (all);
	int10: aadlinteger applies to (all);
end ps;